import { noop } from './util/noop';
import { throwError } from './util/throwError';
import { tryOrThrowError } from './util/tryOrThrowError';
import { Subscription } from './Subscription';
import { rxSubscriber } from './symbol/rxSubscriber';
import { empty as emptyObserver } from './Observer';
export class Subscriber extends Subscription {
    constructor(destination = emptyObserver) {
        super();
        this.isStopped = false;
        this.destination = destination;
        if (!destination ||
            (destination instanceof Subscriber) ||
            (destination === emptyObserver)) {
            return;
        }
        if (typeof destination.next !== 'function') {
            destination.next = noop;
        }
        if (typeof destination.error !== 'function') {
            destination.error = throwError;
        }
        if (typeof destination.complete !== 'function') {
            destination.complete = noop;
        }
    }
    static create(next, error, complete) {
        return new SafeSubscriber(next, error, complete);
    }
    next(value) {
        if (!this.isStopped) {
            this._next(value);
        }
    }
    error(err) {
        if (!this.isStopped) {
            this.isStopped = true;
            this._error(err);
        }
    }
    complete() {
        if (!this.isStopped) {
            this.isStopped = true;
            this._complete();
        }
    }
    unsubscribe() {
        if (this.isUnsubscribed) {
            return;
        }
        this.isStopped = true;
        super.unsubscribe();
    }
    _next(value) {
        this.destination.next(value);
    }
    _error(err) {
        this.destination.error(err);
        this.unsubscribe();
    }
    _complete() {
        this.destination.complete();
        this.unsubscribe();
    }
    [rxSubscriber]() {
        return this;
    }
}
class SafeSubscriber extends Subscriber {
    constructor(next, error, complete) {
        super();
        this._next = (typeof next === 'function') && tryOrThrowError(next) || null;
        this._error = (typeof error === 'function') && tryOrThrowError(error) || throwError;
        this._complete = (typeof complete === 'function') && tryOrThrowError(complete) || null;
    }
    next(value) {
        if (!this.isStopped && this._next) {
            this._next(value);
        }
    }
    error(err) {
        if (!this.isStopped) {
            if (this._error) {
                this._error(err);
            }
            this.unsubscribe();
        }
    }
    complete() {
        if (!this.isStopped) {
            if (this._complete) {
                this._complete();
            }
            this.unsubscribe();
        }
    }
}
//# sourceMappingURL=Subscriber.js.map