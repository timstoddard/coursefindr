import { ScalarObservable } from '../observable/ScalarObservable';
import { ArrayObservable } from '../observable/fromArray';
import { ErrorObservable } from '../observable/throw';
import { Subscriber } from '../Subscriber';
import { tryCatch } from '../util/tryCatch';
import { errorObject } from '../util/errorObject';
/**
 * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.
 * @param {function} predicate a function for determining if an item meets a specified condition.
 * @param {any} [thisArg] optional object to use for `this` in the callback
 * @returns {Observable} an Observable of booleans that determines if all items of the source Observable meet the condition specified.
 */
export function every(predicate, thisArg) {
    const source = this;
    if (source._isScalar) {
        const result = tryCatch(predicate).call(thisArg || this, source.value, 0, source);
        if (result === errorObject) {
            return new ErrorObservable(errorObject.e, source.scheduler);
        }
        else {
            return new ScalarObservable(result, source.scheduler);
        }
    }
    if (source instanceof ArrayObservable) {
        const array = source.array;
        const result = tryCatch((array, predicate, thisArg) => array.every(predicate, thisArg))(array, predicate, thisArg);
        if (result === errorObject) {
            return new ErrorObservable(errorObject.e, source.scheduler);
        }
        else {
            return new ScalarObservable(result, source.scheduler);
        }
    }
    return source.lift(new EveryOperator(predicate, thisArg, source));
}
class EveryOperator {
    constructor(predicate, thisArg, source) {
        this.predicate = predicate;
        this.thisArg = thisArg;
        this.source = source;
    }
    call(observer) {
        return new EverySubscriber(observer, this.predicate, this.thisArg, this.source);
    }
}
class EverySubscriber extends Subscriber {
    constructor(destination, predicate, thisArg, source) {
        super(destination);
        this.predicate = predicate;
        this.thisArg = thisArg;
        this.source = source;
        this.index = 0;
    }
    notifyComplete(everyValueMatch) {
        this.destination.next(everyValueMatch);
        this.destination.complete();
    }
    _next(value) {
        const result = tryCatch(this.predicate).call(this.thisArg || this, value, this.index++, this.source);
        if (result === errorObject) {
            this.destination.error(result.e);
        }
        else if (!result) {
            this.notifyComplete(false);
        }
    }
    _complete() {
        this.notifyComplete(true);
    }
}
//# sourceMappingURL=every.js.map